import { test, expect } from '@playwright/test';

test.describe('VideCut Homepage', () => {
  test('p√°gina inicial carrega corretamente', async ({ page }) => {
    await page.goto('/');
    
    // Verifica se o t√≠tulo est√° presente
    await expect(page.locator('h1')).toContainText('VideCut');
    
    // Verifica se a descri√ß√£o est√° presente
    await expect(page.locator('text=Corte v√≠deos automaticamente com IA')).toBeVisible();
    
    // Verifica se todos os cards est√£o presentes
    await expect(page.locator('text=üé¨ Upload de V√≠deo')).toBeVisible();
    await expect(page.locator('text=‚úÇÔ∏è Cortes Autom√°ticos')).toBeVisible();
    await expect(page.locator('text=üì± Formatos Otimizados')).toBeVisible();
    await expect(page.locator('text=üî§ Legendas em PT')).toBeVisible();
  });

  test('verifica responsividade mobile', async ({ page }) => {
    // Testa em viewport mobile
    await page.setViewportSize({ width: 375, height: 667 });
    await page.goto('/');
    
    // T√≠tulo deve estar vis√≠vel mesmo em mobile
    await expect(page.locator('h1')).toBeVisible();
    
    // Cards devem estar empilhados em coluna √∫nica
    const cards = page.locator('[class*="card"]');
    expect(await cards.count()).toBe(4);
  });

  test('verifica se n√£o h√° erros de console', async ({ page }) => {
    const errors = [];
    page.on('console', msg => {
      if (msg.type() === 'error') {
        errors.push(msg.text());
      }
    });
    
    await page.goto('/');
    
    // Aguarda um pouco para capturar todos os poss√≠veis erros
    await page.waitForTimeout(2000);
    
    expect(errors).toHaveLength(0);
  });

  test('verifica hover nos cards', async ({ page }) => {
    await page.goto('/');
    
    // Pega o primeiro card
    const firstCard = page.locator('[class*="card"]').first();
    
    // Verifica se o card responde ao hover
    await firstCard.hover();
    
    // Verifica se o card est√° vis√≠vel ap√≥s hover
    await expect(firstCard).toBeVisible();
  });
});
